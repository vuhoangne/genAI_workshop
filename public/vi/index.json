[
{
	"uri": "http://localhost:1313/genai_workshop/vi/",
	"title": "Building with Generative AI on AWS using PartyRock, Amazon Bedrock, and Amazon Q",
	"tags": [],
	"description": "",
	"content": "Overview: Workshop - Building with Generative AI on AWS using PartyRock, Amazon Bedrock, and Amazon Q Giới Thiệu Chào mừng bạn đến với workshop \u0026ldquo;Building with Generative AI on AWS\u0026rdquo; – nơi bạn sẽ khám phá cách xây dựng các ứng dụng AI tạo sinh (Generative AI) hiện đại bằng cách sử dụng các dịch vụ hàng đầu của AWS: PartyRock, Amazon Bedrock, và Amazon Q.\nTrong thời đại công nghệ số, AI tạo sinh đang mở ra những cơ hội chưa từng có để xây dựng các ứng dụng thông minh, sáng tạo và mang tính cá nhân hóa cao. Với sự hỗ trợ mạnh mẽ từ nền tảng AWS, bạn có thể nhanh chóng tạo ra các giải pháp AI mà không cần kiến thức sâu về học máy.\nMục Tiêu Workshop Hiểu rõ khái niệm về Generative AI và Foundation Models (FMs). Khám phá cách sử dụng PartyRock để tạo nguyên mẫu (prototype) ứng dụng AI một cách dễ dàng và trực quan. Trải nghiệm Amazon Bedrock – dịch vụ mạnh mẽ cho phép truy cập các mô hình AI tiên tiến thông qua API duy nhất. Khai thác sức mạnh của Amazon Q để tăng hiệu quả công việc, viết code, phân tích dữ liệu và hỗ trợ ra quyết định bằng AI. Nội Dung Chính Giới thiệu về Generative AI và Foundation Models Tạo ứng dụng AI đầu tiên với PartyRock (no-code/low-code) Truy cập và sử dụng các mô hình AI từ Amazon Bedrock Tích hợp Amazon Q để hỗ trợ phát triển và vận hành hệ thống AI Thực hành xây dựng ứng dụng thực tế sử dụng các dịch vụ trên ‍ Đối Tượng Tham Gia Workshop này dành cho:\nSinh viên và lập trình viên muốn tìm hiểu về AI hiện đại. Doanh nghiệp muốn ứng dụng Generative AI vào sản phẩm/dịch vụ. Kỹ sư và kiến trúc sư đám mây muốn tích hợp AI vào các giải pháp AWS hiện có. Kết Quả Mong Đợi Sau workshop, bạn sẽ có thể:\nTự tin xây dựng và triển khai ứng dụng AI tạo sinh trên nền tảng AWS. Biết cách lựa chọn mô hình AI phù hợp với nhu cầu sử dụng. Tận dụng hiệu quả các công cụ hỗ trợ như PartyRock và Amazon Q để tăng tốc quy trình phát triển sản phẩm. Hãy sẵn sàng sáng tạo với AI trên AWS!\nAgenda Introduction module 1 module 2 module 3 Wrapping up Clean up "
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trong hội thảo này, bạn sẽ hoàn thành 3 mô-đun sau:\n️Xây dựng Ứng dụng Generative AI với PartyRock:\nTìm hiểu cách xây dựng nhanh các ứng dụng AI tạo sinh mà không cần viết mã.\nSử dụng Foundation Models trong Amazon Bedrock\nTìm hiểu cách sử dụng các mô hình nền khác nhau để tạo văn bản và hình ảnh bằng Amazon Bedrock.\nTrò chuyện với Tài liệu của bạn\nTìm hiểu cách sử dụng Amazon Bedrock để \u0026ldquo;trò chuyện với tài liệu\u0026rdquo;.\nChúng ta sẽ khám phá cách xây dựng các ứng dụng RAG, làm nổi bật Cơ sở tri thức (Knowledge Bases), embedding và agents.\nĐối Tượng Mục Tiêu Đây là một hội thảo cấp độ 300 dành cho các lập trình viên phần mềm,\nvì vậy việc quen thuộc với các dịch vụ như AWS Lambda và viết mã Python sẽ hữu ích.\nKhông yêu cầu kinh nghiệm về AI/ML.\nThời Gian Hội thảo này dự kiến hoàn thành trong 2 giờ\nChi Phí Lưu ý: Hội thảo này được tổ chức tại các sự kiện AWS,\nbạn có thể thực hành bằng tài khoản riêng nhưng sẽ phát sinh chi phí (ước tính khoảng 10 USD).\nBắt Đầu Nếu bạn đang sử dụng Workshop Studio,\nvui lòng đảm bảo truy cập vào tài khoản AWS đã cung cấp bằng cách nhấn Open AWS console ở góc dưới bên trái của menu.\nVui lòng hoàn thành khảo sát hội thảo khi bạn đã hoàn tất.\n️Các Lưu Ý Hội thảo này chỉ hoạt động tại khu vực us-east-1\nHướng dẫn dọn dẹp tài nguyên được liệt kê tại đây\nToàn bộ mã nguồn cho hội thảo có tại đây\nTất cả mã nguồn được cấp phép theo giấy phép MIT-0\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/4-module3/4.3-building-agents-for-amazon-bedrock/4.3.1-debugging-lambda-functions-with-amazon-q/",
	"title": "Gỡ lỗi hàm Lambda với Amazon Q",
	"tags": [],
	"description": "",
	"content": "️ Gỡ lỗi các hàm Lambda với Amazon Q AWS Lambda là một dịch vụ điện toán không máy chủ cho phép bạn chạy các ứng dụng và dịch vụ mà không cần cung cấp hoặc quản lý máy chủ. Nó tự động xử lý tài nguyên tính toán cơ bản, giúp bạn tập trung vào mã của mình và dễ dàng mở rộng quy mô.\nTrong phần này, bạn sẽ cố tình cập nhật hàm Lambda data_process_action với một số lỗi. Mục tiêu là sử dụng Amazon Q để gỡ lỗi và sửa các lỗi này.\nBắt đầu Mở hàm Lambda data_process_action trong bảng điều khiển AWS Lambda. Nhấn nút Test để gọi hàm. Trong cửa sổ cấu hình sự kiện kiểm tra: Nhập tên sự kiện, ví dụ: test-event. Dán đoạn JSON sau để mô phỏng cuộc gọi từ Agent: { \u0026#34;agent\u0026#34;: { \u0026#34;alias\u0026#34;: \u0026#34;TSTALIASID\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Agent-AWS\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;DRAFT\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;ADI6ICMMZZ\u0026#34; }, \u0026#34;sessionId\u0026#34;: \u0026#34;975786472213626\u0026#34;, \u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;sessionAttributes\u0026#34;: {}, \u0026#34;inputText\u0026#34;: \u0026#34;Can you get the number of records in the databse\u0026#34;, \u0026#34;promptSessionAttributes\u0026#34;: {}, \u0026#34;apiPath\u0026#34;: \u0026#34;/get_num_records\u0026#34;, \u0026#34;messageVersion\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;actionGroup\u0026#34;: \u0026#34;agent_action_group\u0026#34; } Nhấn lại Test để chạy hàm. ‍ Lỗi đầu tiên Lần chạy đầu tiên có thể bị lỗi do thiếu các thư viện cần thiết. Đừng lo — Amazon Q trong bảng điều khiển sẽ hỗ trợ bạn:\nNhấn vào biểu tượng Q ở thanh bên phải màn hình để mở cửa sổ trò chuyện với Amazon Q. Đặt câu hỏi: Làm sao để thêm AWS Lambda layer pandas chính thức vào hàm Lambda mà không dùng CLI? Làm theo hướng dẫn của Q để tích hợp Lambda Layer có sẵn chứa thư viện Pandas. Gỡ lỗi chuyên sâu với Amazon Q Ngoài cửa sổ trò chuyện, bạn có thể sử dụng chức năng Troubleshoot with Amazon Q (Gỡ lỗi với Amazon Q) để nhận hỗ trợ cụ thể hơn:\nTrong bảng điều khiển Lambda, ở tab Test, nhấn Test để chạy lại hàm. Khi lỗi mới xuất hiện, nhấn nút Troubleshoot with Amazon Q. Nhấn Help me resolve để nhờ Q đưa ra giải pháp. Làm theo các đề xuất của Q như: Cập nhật biến môi trường S3_OBJECT nếu cần. Tên tệp nên là: clickstream_data.csv Sửa các lỗi logic khác trong mã nếu có, dưới sự hướng dẫn của Q. Sau khi sửa lỗi Kiểm tra lại hàm Lambda để đảm bảo lỗi đã được xử lý. Tiếp tục sử dụng Troubleshoot with Q cho từng lỗi nếu vẫn còn phát sinh. Khi chạy thành công, hàm sẽ trả về kết quả xử lý dữ liệu chính xác và không có lỗi. Cần trợ giúp? Đây là những việc cần làm tiếp theo\nCập nhật biến môi trường S3_OBJECT thành clickstream_data.csv Sửa lỗi đánh máy trong đường dẫn tệp (thay /tmp/data,csv bằng /tmp/data.csv) trong mã hàm Lambda. Thay đổi length thành len trong mã hàm Lambda Đây là mã hoàn chỉnh để tham khảo\nimport os import json import pandas import boto3 S3_BUCKET = os.environ[\u0026#34;S3_BUCKET\u0026#34;] S3_OBJECT = os.environ[\u0026#34;S3_OBJECT\u0026#34;] def lambda_handler(event, context): # Print the received event to the logs print(\u0026#34;Received event: \u0026#34;) print(event) # Initialize response code to None response_code = None # Extract the action group, api path, and parameters from the prediction action = event[\u0026#34;actionGroup\u0026#34;] api_path = event[\u0026#34;apiPath\u0026#34;] inputText = event[\u0026#34;inputText\u0026#34;] httpMethod = event[\u0026#34;httpMethod\u0026#34;] print(f\u0026#34;inputText: {inputText}\u0026#34;) # Check the api path to determine which tool function to call if api_path == \u0026#34;/get_num_records\u0026#34;: s3 = boto3.client(\u0026#34;s3\u0026#34;) s3.download_file(S3_BUCKET, S3_OBJECT, \u0026#34;/tmp/data.csv\u0026#34;) df = pandas.read_csv(\u0026#34;/tmp/data.csv\u0026#34;) # Get count of dataframe count = len(df) response_body = {\u0026#34;application/json\u0026#34;: {\u0026#34;body\u0026#34;: str(count)}} response_code = 200 else: # If the api path is not recognized, return an error message body = {\u0026#34;{}::{} is not a valid api, try another one.\u0026#34;.format(action, api_path)} response_code = 400 response_body = {\u0026#34;application/json\u0026#34;: {\u0026#34;body\u0026#34;: str(body)}} # Print the response body to the logs print(f\u0026#34;Response body: {response_body}\u0026#34;) # Create a dictionary containing the response details action_response = { \u0026#34;actionGroup\u0026#34;: action, \u0026#34;apiPath\u0026#34;: api_path, \u0026#34;httpMethod\u0026#34;: httpMethod, \u0026#34;httpStatusCode\u0026#34;: response_code, \u0026#34;responseBody\u0026#34;: response_body, } # Return the list of responses as a dictionary api_response = {\u0026#34;messageVersion\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;response\u0026#34;: action_response} return api_response Kiểm tra Agent Khi hàm Lambda đã được sửa, quay lại Agent và hỏi lại:\nCan you help with the data processing task of getting the number of records in the production database? Lần này, Agent sẽ trả lời chính xác. Bạn cũng có thể xem trace để theo dõi cách Agent \u0026ldquo;suy nghĩ\u0026rdquo; qua các bước để tạo ra câu trả lời chính xác.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/4-module3/4.1-retrieval-augmented-generation-with-amazon-bedrock/",
	"title": "Retrieval Augmented Generation với Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Trước khi đi sâu vào quy trình RAG, điều quan trọng là phải hiểu về embeddings. Embeddings biểu diễn tài liệu dưới dạng các vector trong không gian đa chiều. Các vector này nắm bắt bản chất của nội dung ở định dạng mà máy tính có thể xử lý. Bằng cách chuyển đổi văn bản thành embeddings, chúng ta cho phép máy tính \u0026ldquo;hiểu\u0026rdquo; và so sánh các đoạn văn bản khác nhau dựa trên sự tương đồng về ngữ cảnh của chúng.\nTrực quan hóa Embedding Sau khi embeddings được tạo ra, bước tiếp theo là lưu trữ và tổ chức chúng để truy xuất hiệu quả. Đây là lúc cơ sở dữ liệu vector phát huy tác dụng. Cơ sở dữ liệu vector cho phép chúng ta lưu trữ và truy vấn embeddings, tạo điều kiện cho việc truy xuất nhanh chóng và phù hợp các tài liệu dựa trên biểu diễn vector của chúng. Về cơ bản, nó đóng vai trò như cầu nối giữa dữ liệu thô và những hiểu biết có thể hành động được từ các mô hình ngôn ngữ lớn (LLMs). Trong module này, chúng ta sẽ sử dụng FAISS.\n️ Tăng cường RAG với Amazon Bedrock Với nền tảng embeddings và cơ sở dữ liệu vector, chúng ta đã sẵn sàng triển khai quy trình RAG sử dụng Amazon Bedrock. Phần này trình bày cách sử dụng các mô hình ngôn ngữ lớn để xử lý các truy vấn đầu vào, truy xuất embeddings tài liệu liên quan từ cơ sở dữ liệu vector và tạo ra các phản hồi mạch lạc, phù hợp với ngữ cảnh bằng LLMs. Chúng ta cũng sẽ tận dụng LangChain, một framework được thiết kế để đơn giản hóa việc xây dựng các ứng dụng sử dụng LLM.\nBài tập 1: Bắt đầu với RAG Mở rag_examples/base_rag.py. Hãy xem qua mã để hiểu cách RAG hoạt động.\nChúng ta bắt đầu với danh sách các câu ví dụ (dòng 15):\nsentences = [ # Pets \u0026#34;Your dog is so cute.\u0026#34;, \u0026#34;How cute your dog is!\u0026#34;, \u0026#34;You have such a cute dog!\u0026#34;, # Cities in the US \u0026#34;New York City is the place where I work.\u0026#34;, \u0026#34;I work in New York City.\u0026#34;, # Color \u0026#34;What color do you like the most?\u0026#34;, \u0026#34;What is your favorite color?\u0026#34;, ] Bây giờ hãy xem cách triển khai quy trình RAG trong rag_with_bedrock (dòng 60)\nTạo Bedrock Embeddings Chúng ta khởi tạo hàm embedding bằng cách gọi BedrockEmbeddings. Chúng ta đang sử dụng mô hình embedding văn bản Amazon Titan để chuyển đổi văn bản thành định dạng vector để so sánh tương đồng. embeddings = BedrockEmbeddings( client=bedrock_runtime, model_id=\u0026#34;amazon.titan-embed-text-v1\u0026#34;, ) Tìm kiếm Vector với FAISS Chúng ta tạo một kho lưu trữ vector cục bộ bằng FAISS.from_texts, lập chỉ mục các embeddings câu vào cơ sở dữ liệu vector có thể tìm kiếm. Sau đó, chúng ta có thể vector hóa một truy vấn và truy xuất các tài liệu tương tự. local_vector_store = FAISS.from_texts(sentences, embeddings) docs = local_vector_store.similarity_search(query) Gọi RAG Prompt: Chúng ta biên soạn nội dung của các tài liệu đã truy xuất để tạo thành một chuỗi ngữ cảnh. Sau đó, chúng ta tạo một prompt bao gồm ngữ cảnh và truy vấn. Cuối cùng, chúng ta gọi hàm call_claude với prompt của chúng ta để nhận câu trả lời. for doc in docs: context += doc.page_content prompt = f\u0026#34;\u0026#34;\u0026#34;Use the following pieces of context to answer the question at the end. {context} Question: {query} Answer:\u0026#34;\u0026#34;\u0026#34; model_id = \u0026#34;us.amazon.nova-lite-v1:0\u0026#34; system_prompts = [{\u0026#34;text\u0026#34;: \u0026#34;You are a helpful AI\u0026#34;}] message_1 = { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: [{\u0026#34;text\u0026#34;: f\u0026#34;{prompt}\u0026#34;}], } messages = [message_1] result = generate_conversation(model_id, system_prompts, messages) return result Để kiểm tra mã, hãy chạy:\npython3 rag_examples/base_rag.py Thử thay đổi truy vấn ở dòng 109. Ví dụ:\nthử What city do I work in? Bài tập 2: Trò chuyện với PDF Có một ví dụ khác về cách trò chuyện với PDF. Trong rag_examples/chat_with_pdf.py, chúng ta có hàm chunk_doc_to_text sẽ tiếp nhận PDF và chia nhỏ mỗi 1000 ký tự để lưu trữ trong cơ sở dữ liệu vector. Quá trình này có thể mất một thời gian tùy thuộc vào máy chủ, vì vậy chúng tôi đã chia nhỏ dữ liệu được lưu trữ trong thư mục local_index.\nTrong ví dụ này, chúng tôi đã lưu trữ tất cả văn bản từ AWS Well Architected Framework, tài liệu nêu bật các phương pháp tốt nhất để thiết kế và vận hành các hệ thống đáng tin cậy, an toàn, hiệu quả, tiết kiệm chi phí và bền vững trên đám mây.\nBây giờ hãy thử chạy mã bằng cách nhập lệnh sau vào Terminal và nhấn Enter:\npython3 rag_examples/chat_with_pdf.py Bạn có thể thay đổi truy vấn ở dòng 123. Hãy thử nghiệm để xem mô hình có thể sử dụng ngữ cảnh để tìm ra câu trả lời chính xác như thế nào. Ví dụ, hãy thử:\nWhat are some good use cases for non-SQL databases? What is the Well-Architected Framework? How can I improve security in the cloud? Bạn thậm chí có thể thử các câu hỏi ngoài chủ đề như what are popular ice cream flavors để xem mô hình xử lý các câu hỏi ngoài ngữ cảnh như thế nào.\nTổng kết Giờ đây bạn đã có cái nhìn tổng quan về việc sử dụng Amazon Bedrock cho RAG, hãy cùng khám phá cách tạo quy trình RAG có thể mở rộng.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/3-module2/3.2-use-amazon-bedrock-api/3.2.1-generating-images-with-amazon-bedrock/",
	"title": "Sử dụng Amazon Bedrock API để Tạo Ảnh với Amazon Nova Canvas",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ khám phá cách sử dụng Amazon Bedrock API để tạo hình ảnh bằng Amazon Nova Canvas. Chúng ta sẽ hoàn thành ba bài tập mã hóa để xây dựng các ứng dụng tạo hình ảnh với sự trợ giúp của Amazon Q Developer.\nGiới thiệu về Amazon Nova Amazon Nova là thế hệ tiếp theo của các mô hình nền tảng tiên tiến (FMs) cung cấp trí tuệ vượt trội và hiệu suất giá thành hàng đầu ngành, chỉ có trên Amazon Bedrock.\nBạn có thể sử dụng Amazon Nova để giảm chi phí và độ trễ cho hầu hết các tác vụ AI sinh. Nó hỗ trợ phân tích tài liệu và video phức tạp, hiểu sơ đồ, tạo nội dung video hấp dẫn và xây dựng các tác nhân AI tinh vi được tối ưu hóa cho công việc doanh nghiệp.\nCho dù bạn đang phát triển ứng dụng xử lý tài liệu văn bản và hình ảnh, tạo nội dung tiếp thị ở quy mô lớn, hay xây dựng trợ lý AI có thể hiểu và xử lý thông tin trực quan, Amazon Nova đều cung cấp trí tuệ và tính linh hoạt cần thiết thông qua hai loại mô hình:\nMô hình Hiểu (Understanding Models): Nhận đầu vào là văn bản, hình ảnh hoặc video và tạo đầu ra là văn bản. Mô hình Tạo Sáng Tạo (Creative Generation Models): Nhận đầu vào là văn bản và/hoặc hình ảnh và tạo đầu ra là hình ảnh hoặc video. Amazon Nova Canvas Amazon Nova Canvas là một mô hình tạo hình ảnh hiện đại giúp tạo ra hình ảnh chuyên nghiệp từ văn bản hoặc hình ảnh người dùng cung cấp. Nó cũng bao gồm các công cụ chỉnh sửa hình ảnh dễ sử dụng thông qua hướng dẫn bằng văn bản, cũng như các điều khiển để điều chỉnh bảng màu và bố cục.\nMô hình này bao gồm các tính năng an toàn tích hợp cho việc sử dụng AI có trách nhiệm, như đóng dấu bản quyền và kiểm duyệt nội dung.\nBài Tập 1: Xây dựng Ứng dụng Từ Văn Bản Thành Hình Ảnh Chúng ta sẽ bắt đầu bằng cách tạo một ứng dụng Streamlit để tạo ảnh từ lời nhắc người dùng và các phong cách được định sẵn. Streamlit cho phép bạn dễ dàng xây dựng các ứng dụng web tương tác bằng Python.\nMục tiêu Xây dựng ứng dụng cho phép người dùng:\nChọn mô hình. Nhập lời nhắc để gửi tới Amazon Bedrock. Hiển thị hình ảnh được tạo. Ứng dụng cuối cùng sẽ như sau: Gen Image App\nBắt Đầu Trong Visual Studio Code IDE, mở tệp:\nimage_examples/image_gen_st.py\nTệp này chứa mã để gọi các mô hình khác nhau nhưng thiếu các thành phần giao diện tương tác. Đây là lúc Amazon Q Developer sẽ giúp biến ý tưởng thành mã thực thi.\nAmazon Q Developer - Viết Mã Vì chúng ta đã biết chức năng dự định của ứng dụng, hãy yêu cầu Amazon Q cập nhật ứng dụng với nội dung sau:\nCan you add the following to my application: 1. A text input box to capture user prompts. 2. A standalone function that can turn a base64 string into an image. 3. A button to call `generate_image_nova` 4. The image return will be a base64 string; use the standalone function to convert it to an image that can be displayed in Streamlit. Amazon Q Developer sẽ xử lý yêu cầu và cung cấp mã được cập nhật cho tệp.\nAmazon Q Developer - Hiểu Mã Để hiểu chức năng của mã:\nBôi đen đoạn mã. Nhấp chuột phải và chọn: Send to Amazon Q → Explain. Q Developer sẽ trả lại giải thích chi tiết về mã.\nChạy Mã Để kiểm tra mã của bạn:\nChạy từ terminal: streamlit run image_examples/image_gen_st.py Nhấp vào Open in Browser (hoặc dùng URL ngoài).\nNếu thành công, bạn sẽ thấy ứng dụng. Hãy tạo hình ảnh bằng cách nhập lời nhắc, ví dụ:\na cat jumping into water và nhấp vào nút. Nếu có lỗi, quay lại IDE và sử dụng Amazon Q Developer để gỡ lỗi. Mã đầy đủ có tại: full_code/image_gen_st_full.py\nBước tiếp theo Trong bài tập tiếp theo, chúng ta sẽ chỉnh sửa hình ảnh bằng một lời nhắc (prompt).\nBạn có thể lưu lại một trong các hình ảnh đã tạo trước đó hoặc sử dụng hình ảnh bên dưới để thực hành.\nBài Tập 2: Xây dựng Ứng dụng Từ Hình Ảnh Thành Hình Ảnh Trong bài tập này, ch### Bài tập 2: Xây dựng ứng dụng Chuyển Đổi Ảnh (Image-to-Image App)\nTrong bài tập này, chúng ta sẽ xây dựng một ứng dụng có thể chỉnh sửa ảnh dựa trên lời nhắc từ người dùng.\n️ Trước tiên, hãy mở tệp sau:\nimage_examples/image_to_image_st.py Tệp này đã có một số đoạn mã dùng để chuyển đổi ảnh, nhưng vẫn thiếu một số thành phần tương tác để hoạt động một cách đầy đủ.\nĐây là lúc bạn có thể tận dụng tính năng gợi ý mã trực tiếp trong image_to_image_st.py từ Amazon Q Developer để tạo phần mã còn thiếu.\nNhiệm vụ cần hoàn thành Trong tệp image_to_image_st.py, nhiệm vụ của bạn là thêm các chú thích tại dòng # TODO insert your comments (dòng 148) để hỗ trợ sinh ra các chức năng sau:\nThêm thành phần để người dùng tải ảnh lên Thêm ô nhập lời nhắc (prompt) để người dùng yêu cầu chỉnh sửa ảnh Cách sử dụng gợi ý mã trực tiếp (Inline Code Suggestions) Trên Mac: nhấn Option + C Trên Windows: nhấn Alt + C Cần trợ giúp? Hãy thử nhập các gợi ý như ở trên để Amazon Q Developer hỗ trợ bạn.\nMã tham khảo đầy đủ có sẵn tại: full_code/image_to_image_st_full.py\nChạy mã của bạn Khi đã sẵn sàng kiểm tra ứng dụng, hãy chạy lệnh sau trong Terminal:\nstreamlit run image_examples/image_to_image_st.py Dừng ứng dụng bất cứ lúc nào bằng CTRL + C\nVí dụ về lời nhắc chỉnh sửa ảnh mèo add a yellow mane to the cat Nhớ nhấn vào nút mà bạn đã tạo để thực hiện yêu cầu. Hãy thử với các lời nhắc khác nhau để khám phá!\nTrong bài tiếp theo, chúng ta sẽ tìm hiểu cách chỉnh sửa ảnh nâng cao hơn. Bài tập 3: Xây dựng ứng dụng Hiểu Ảnh (Image Understanding App) Trong phần này, chúng ta sẽ khám phá cách sử dụng Claude 3.5 Sonnet, mô hình AI đa phương thức của Anthropic, để:\n️ Nhập một ảnh Nhận mô tả chi tiết dạng văn bản về ảnh đó Chúng ta cũng sẽ khám phá cách sử dụng tính năng /dev của Amazon Q Developer để thêm chức năng mới.\nNhiệm vụ cần hoàn thành ️ Mở tệp:\nimage_examples/image_understanding_st.py Tệp này còn thiếu một số thành phần tương tác. Bạn cần:\nHiển thị ảnh ở cột 1 Thêm nút bấm để mô tả ảnh bằng Claude Sonnet Sử dụng /dev trong Amazon Q Developer Trong cửa sổ chat Amazon Q Developer, nhập:\n/dev Khi /dev được in đậm, yêu cầu:\nCan you update image_understanding_st.py to show the image in column 1, and then add a button to describe the image. Amazon Q Developer sẽ:\nTạo kế hoạch tính năng Hiển thị các thay đổi đề xuất ️ Cho phép bạn bấm Generate code Cho phép bạn xem lại và bấm Insert code Mã tham khảo đầy đủ có tại:\nfull_code/image_understanding_st_full.py Chạy mã của bạn Trong Terminal, chạy:\nstreamlit run image_examples/image_understanding_st.py Dừng bằng CTRL + C\nNhấn nút bạn đã tạo và thử với các ảnh khác nhau!\nKết luận Giờ bạn đã biết cách sử dụng Amazon Bedrock để tạo và chỉnh sửa ảnh.\nTiếp theo, chúng ta sẽ khám phá cách dùng công cụ này cho các tác vụ tạo văn bản!\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/3-module2/3.1-use-amazon-bedrock-playground/",
	"title": "Sử Dụng Amazon Bedrock Playground",
	"tags": [],
	"description": "",
	"content": "Amazon Bedrock Playground cung cấp một cách để nhanh chóng thử nghiệm các mô hình nền tảng khác nhau bên trong AWS Console. Bạn có thể so sánh đầu ra của mô hình, tải lời nhắc ví dụ và thậm chí xuất các yêu cầu API. Sau đây là các chế độ được hỗ trợ:\nTrò chuyện/Văn bản: Thử nghiệm nhiều tác vụ xử lý ngôn ngữ khác nhau trong giao diện từng bước.\n️ Hình ảnh/Video: Dễ dàng tạo ra hình ảnh/video hấp dẫn bằng cách cung cấp lời nhắc văn bản cho các mô hình được đào tạo trước.\nBạn có thể truy cập sân chơi từ các liên kết ở trên hoặc từ Amazon Bedrock Console trong menu Playgrounds bên trái. Hãy dành vài phút để thử nghiệm một số ví dụ.\nVí dụ về sân chơi Sau đây là một số ví dụ bạn có thể thử ở mỗi sân chơi\nTrò chuyện/Văn bản Trong Amazon Bedrock, chọn : Chọn Chat / Text trong Playgrounds. Chọn Select model. Chọn Amazon Nova Pro. Chọn Apply. Thử lời nhắc hệ thống sau: You an expert AWS Solutions architect that helps customers create scalable cost efficient solutions on AWS How can I create a 3 tier web app on AWS? Thanh bên có các cấu hình mô hình mà bạn có thể tùy chỉnh. Thử thay đổi temperature thành 1 để mô hình trở nên sáng tạo hơn trong phản hồi. ️ Hình ảnh Trong Amazon Bedrock, chọn : Chọn Image / Canvas trong Playgrounds. Chọn Select model. Chọn Amazon Nova Canvas. Chọn Apply. Thử một số lời nhắc sau: unicorns in a magical forest. Lots of trees and animals around. The mood is bright, and there is lots of natural lighting Downtown City, with lots of skyscrapers. At night time, lots of lights in the buildings. Amazon Bedrock sẽ tạo ra hình ảnh dựa trên nội dung bạn mô tả.\n️ Hành động hình ảnh Với Nova Canvas, bạn có thể thực hiện các hành động như:\nXóa nền,\n️ Xóa đối tượng,\nTạo biến thể hình ảnh.\nHãy thử chạy một trong các hành động này với hình ảnh bạn đã tạo.\nTiếp theo Khi hoàn tất phần thử nghiệm, hãy xem cách chúng ta có thể đưa sức mạnh của Amazon Bedrock vào các ứng dụng thực tế bằng cách sử dụng API.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/4-module3/4.3-building-agents-for-amazon-bedrock/4.3.2-agents-api/",
	"title": "API của Agent",
	"tags": [],
	"description": "",
	"content": "Bạn cũng có thể gọi agent của mình thông qua API.\nĐể thử nghiệm:\nQuay lại VSCode Server và mở tệp rag_examples/agent_rag.py. Cập nhật AGENT_ID với ID của Agent của bạn. ID này nằm trong phần tổng quan của Agent mà bạn đã tạo. Nhấp vào biểu tượng Menu (hình hamburger) ở góc trên bên trái. Điều hướng đến Terminal -\u0026gt; New Terminal. Chạy mã với lệnh python3 rag_examples/agent_rag.py. ️Thử thay đổi QUERY ở dòng 6 để xem các loại phản hồi khác nhau. "
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/2-module1/",
	"title": "Module 1",
	"tags": [],
	"description": "",
	"content": "Xây Dựng Ứng Dụng Generative AI với PartyRock PartyRock là gì? PartyRock là một playground tạo ứng dụng Generative AI có thể chia sẻ, cho phép bạn thử nghiệm kỹ thuật prompt một cách thực tế và thú vị. Chỉ với vài cú nhấp chuột, bạn có thể xây dựng, chia sẻ và tùy biến ứng dụng để khám phá Generative AI.\nMột số ví dụ ứng dụng: Tạo ứng dụng tạo truyện cười theo chủ đề tuỳ chọn. Tạo và chơi trò chơi đố vui trực tuyến với bạn bè. Tạo AI kể chuyện để dẫn dắt buổi chơi nhập vai kỳ ảo. Thông qua việc xây dựng và chơi với các ứng dụng trên PartyRock, bạn sẽ học được các kỹ thuật quan trọng như:\nHiểu cách mô hình nền phản hồi các prompt ️ Thử nghiệm kỹ thuật prompt engineering Kết chuỗi prompt để tạo hành vi phức tạp hơn Lưu ý: Bạn có thể tạo hồ sơ bằng cách đăng nhập xã hội qua Amazon.com, Apple hoặc Google.\nPartyRock tách biệt với AWS Console và không yêu cầu tài khoản AWS.\nBài Tập 1: Xây Dựng Ứng Dụng PartyRock Ứng dụng: MoodWiseBooks Chúng ta sẽ xây dựng một ứng dụng gợi ý sách dựa trên tâm trạng của bạn.\nCác bước thực hiện: Truy cập PartyRock website Đăng nhập bằng tài khoản Amazon.com, Apple hoặc Google Nhấn Generate app Nhập prompt sau:\nProvide book recommendations based on your mood and a chat bot to talk about the books Nhấn Generate Sử Dụng Ứng Dụng PartyRock sẽ tự động tạo giao diện để:\nNhận đầu vào từ người dùng Đưa ra gợi ý sách Bao gồm chatbot để thảo luận về sách Hãy thử nhập tâm trạng của bạn và nói chuyện với chatbot về các cuốn sách được đề xuất.\nBạn có thể chia sẻ ứng dụng bằng cách nhấn Share.\nCập Nhật Ứng Dụng Trong PartyRock, mỗi thành phần giao diện là một Widget. Widget có thể:\nHiển thị nội dung Nhận đầu vào từ người dùng Kết nối với widget khác Tạo đầu ra ️Các loại Widget có hỗ trợ AI: ️ Tạo hình ảnh Chatbot Tạo văn bản Bạn có thể chỉnh sửa các widget AI để thay đổi hành vi và kết quả.\nCác loại widget khác: User input – Cho phép người dùng tương tác Static text – Hiển thị mô tả hoặc hướng dẫn Document upload – Nhận tài liệu từ người dùng Tham khảo thêm tại PartyRock Guide\nBài Tập 2: Vui Chơi với PartyRock Thử thay đổi prompt trong ứng dụng của bạn. Thử nghiệm kết chuỗi đầu ra từ widget này làm đầu vào cho widget khác. Thêm widget vẽ ảnh từ gợi ý sách Remix Ứng Dụng Tính năng Remix giúp bạn:\nTạo bản sao ứng dụng về tài khoản cá nhân Tuỳ chỉnh và mở rộng ứng dụng có sẵn Remix các app công khai từ PartyRock Discover page hoặc bạn bè Tạo Snapshot Khi có phản hồi thú vị hoặc hài hước:\nĐảm bảo app của bạn đã bật chế độ public Nhấn Snapshot ở góc phải trên Chia sẻ URL chứa đầu vào và đầu ra hiện tại Tổng Kết PartyRock cho phép bạn khám phá và tạo nguyên mẫu ý tưởng Generative AI một cách nhanh chóng.\nĐể xây dựng ứng dụng sẵn sàng cho sản xuất, bạn có thể hiện thực hoá ý tưởng bằng Amazon Bedrock.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/4-module3/4.2-using-amazon-bedrock-knowledge-bases/",
	"title": "Sử dụng Amazon Bedrock Knowledge Bases",
	"tags": [],
	"description": "",
	"content": "Amazon Bedrock Knowledge Bases cung cấp một dịch vụ RAG (Retrieval Augmented Generation) được quản lý hoàn toàn để truy vấn dữ liệu đã tải lên. Bằng cách chỉ định vị trí dữ liệu trong Amazon S3, dịch vụ sẽ:\nTự động lấy tài liệu, Chia nhỏ thành các khối văn bản, Chuyển đổi thành embedding, Lưu embedding vào cơ sở dữ liệu vector. Ngoài ra còn có API để xây dựng ứng dụng sử dụng Knowledge Base.\nTrong module này, chúng ta sẽ tạo một Knowledge Base sử dụng một phần của tài liệu AWS Well-Architected Framework.\nBài tập 1: Tạo Knowledge Base trong AWS Console Truy cập Knowledge Base Console. Nhấn nút Create (màu cam) và chọn Knowledge Base with vector store. Đặt tên mặc định hoặc nhập tên tùy ý → Nhấn Next. Nhấn Browse S3, chọn bucket có tên chứa awsdocsbucket → Nhấn Next. Chọn Titan Embeddings V2 làm mô hình embedding → Để mặc định Vector store → Nhấn Next. Cuộn xuống và chọn Create Knowledge Base. Việc tạo Knowledge Base mất vài phút. Đừng rời khỏi trang này.\nTrong lúc đợi, có thể làm khảo sát tại: https://pulse.aws/survey/UBCJUUZV\nQuerying a Knowledge Base Khi Knowledge Base đã sẵn sàng, bạn có thể thử ngay trong giao diện console:\nNhấn Sync để đồng bộ dữ liệu (mất khoảng 1 phút). Nhấn Select Model, chọn Amazon Nova Pro → Nhấn Apply. Nhập câu hỏi trong khung Enter your message here, ví dụ: Can you explain what a VPC is? Nhấn Run để nhận phản hồi từ mô hình và xem nguồn tài liệu ở mục Show result details. Hãy thử nhiều câu hỏi khác để khám phá thêm!\nExercise 2: Using the Knowledge Base API Bạn cũng có thể truy vấn qua API với 2 phương thức:\nretrieve: Trả về các tài liệu liên quan đến câu hỏi. retrieve_and_generate: Thực hiện RAG workflow với mô hình. Thực hiện: Mở file rag_examples/kb_rag.py trong IDE. Cập nhật biến KB_ID với ID của Knowledge Base (xem trong phần Overview). Chạy lệnh: python3 rag_examples/kb_rag.py Thử thay đổi biến QUERY ở dòng 4 để xem các phản hồi khác nhau. Mã lệnh đang thực hiện quy trình RAG: chuyển câu hỏi thành embedding, truy xuất tài liệu liên quan, và trả lời bằng mô hình.\nWrap up Sau khi đã tạo Knowledge Base, bước tiếp theo sẽ là nhúng Knowledge Base này vào một Amazon Bedrock Agent để xây dựng hệ thống phản hồi tự động thông minh hơn.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/3-module2/3.2-use-amazon-bedrock-api/3.2.2-generating-text-with-amazon-bedrock/",
	"title": "Tạo Văn Bản với Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Trong mô-đun này, chúng ta sẽ khám phá cách sử dụng Amazon Bedrock Converse API để tạo các ứng dụng hội thoại cho:\n️ Tóm tắt văn bản Phân tích cảm xúc Hỏi và Đáp (Q\u0026amp;A) Converse API cung cấp một API thống nhất hoạt động với tất cả các mô hình Amazon Bedrock hỗ trợ tin nhắn. Điều này có nghĩa là bạn chỉ cần viết mã một lần và có thể sử dụng với các mô hình khác nhau. Nếu mô hình có các tham số suy luận riêng biệt, Converse API cũng cho phép bạn truyền các tham số đó trong một cấu trúc dành riêng cho mô hình.\nChúng ta sẽ học cách gọi các mô hình nền tảng khác nhau để thực hiện các tác vụ này. Hãy tận dụng Amazon Q Developer để hỗ trợ bạn hoàn thành các bài tập.\n️ Bắt đầu Để bắt đầu, chúng ta sẽ cập nhật một script để chạy các ví dụ tạo văn bản. Trong Visual Studio Code IDE của bạn, hãy mở file:\ntext_examples/gen_text.py\nỞ đây chúng ta có mã gọi đến các mô hình khác nhau, nhưng thiếu logic để mã hoạt động. Đây là lúc bạn có thể sử dụng Amazon Q Developer để biến ý tưởng thành mã có thể chạy được.\nHiện tại, đoạn mã cho chức năng tóm tắt văn bản đã được hoàn thành. Các bài tập sẽ hướng dẫn bạn hoàn thiện phần cho phân tích cảm xúc và Hỏi \u0026amp; Đáp (Q\u0026amp;A).\nBạn có thể chọn bất kỳ mô hình nào được liệt kê ở dòng 58 để giúp hoàn thành các bài tập.\nMã tham khảo đầy đủ có sẵn tại:\nfull_code/gen_text.py\nBài Tập 1: Phân Tích Cảm Xúc với Amazon Bedrock Phân tích cảm xúc là phiên bản công nghệ của việc “đọc không khí”. Nó đánh giá cảm xúc hoặc quan điểm ẩn trong một đoạn văn bản. Doanh nghiệp sử dụng để hiểu phản hồi khách hàng, xu hướng thị trường và các cuộc trò chuyện trên mạng xã hội — biến dữ liệu định tính thành thông tin có thể hành động.\nHiện tại, hàm sentiment_analysis (dòng 93) đang chờ bạn hoàn thiện. Bạn cần điền vào hàm này bằng cách gọi đến một mô hình và tạo một prompt để thực hiện phân tích cảm xúc.\nBạn có thể xem hàm summarize_text (dòng 71) như một ví dụ mẫu.\nChạy script bằng cách sử dụng lệnh sau trong terminal:\npython3 text_examples/gen_text.py Đoạn văn bản bạn sẽ làm việc với nằm ở dòng 113.\nBài Tập 2: Hỏi \u0026amp; Đáp với Amazon Bedrock Hệ thống Hỏi và Đáp (Q\u0026amp;A) giống như một trợ lý nghiên cứu cá nhân của bạn. Chúng giúp bạn trích xuất câu trả lời cụ thể từ một lượng lớn thông tin. Điều này cực kỳ hữu ích trong các tình huống như chatbot chăm sóc khách hàng hoặc trích xuất thông tin từ tập dữ liệu lớn.\nBạn cần hoàn thiện hàm perform_qa (dòng 103) bằng cách gọi đến một mô hình và tạo prompt nhận vào câu hỏi và đoạn văn bản nguồn.\nThực thi script bằng cách nhập lệnh sau trong Terminal và nhấn Enter:\npython3 text_examples/gen_text.py Tổng Kết Giờ bạn đã có cái nhìn tổng quan về cách sử dụng Amazon Bedrock để xử lý văn bản, hãy cùng khám phá cách sử dụng nó cho các tác vụ video tiếp theo!\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/3-module2/3.2-use-amazon-bedrock-api/3.2.3-understanding-video-with-amazon-bedrock/",
	"title": "Hiểu Video với Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tìm hiểu cách tận dụng Amazon Nova để phân tích và hiểu nội dung video.\nBài tập 1: Hiểu Video Trong bài tập này, chúng ta sẽ khám phá cách sử dụng các mô hình hiểu của Amazon Nova để phân tích nội dung video. Hãy tưởng tượng bạn đang xây dựng một hệ thống quản lý nội dung tự động tạo ra các tiêu đề hấp dẫn cho nội dung video. Điều này có thể hữu ích cho:\nMột công ty truyền thông xử lý số lượng lớn video Một nhóm tiếp thị tổ chức tài sản video Một nền tảng học trực tuyến phân loại video giáo dục Chúng ta sẽ tạo một script phân tích tệp MP4 về biển và sử dụng khả năng hiểu nâng cao của Nova để tạo ra các tiêu đề sáng tạo và phù hợp dựa trên nội dung video. Điều này thể hiện khả năng của Nova trong việc hiểu thông tin hình ảnh phức tạp và tạo ra văn bản giống con người.\nBắt đầu Mở tệp:\nvideo_examples/video_understanding.py Tệp này đã chứa mã để nhập video và gửi yêu cầu đến Amazon Nova. Tuy nhiên, nó còn thiếu định dạng dữ liệu chính xác để gửi video đến Amazon Bedrock.\nĐây là lúc bạn có thể sử dụng Amazon Q Developer để thực hiện chỉnh sửa trực tiếp nhanh chóng để hoàn thành chức năng còn thiếu.\nSử dụng Amazon Q Developer để Chỉnh sửa Trực tiếp Để hoàn thành chức năng định dạng video:\nBôi đen hàm encode_video_to_base64 ở dòng 17 Nhấn ⌘ + I trên Mac hoặc Ctrl + I trên Windows Nhập lệnh sau: Finish the TODO and return the correct data Chạy Mã của Bạn Khi bạn đã sẵn sàng để kiểm tra script:\ncd video_examples python3 video_understanding.py Nếu thành công, bạn sẽ thấy các tiêu đề được tạo ra cho video của bạn.\nNếu gặp lỗi, hãy sử dụng Amazon Q Developer để giúp gỡ lỗi.\nBạn cũng có thể tham khảo giải pháp hoàn chỉnh tại đây:\nfull_code/video_understanding_full.py Khám phá Khả năng của Nova Khi triển khai cơ bản hoạt động, hãy thử nghiệm với các lệnh khác nhau để khám phá sức mạnh của Nova:\nTạo tóm tắt video chi tiết để phân loại nội dung Tạo mô tả hấp dẫn cho mạng xã hội Tạo phân tích từng cảnh cho việc chỉnh sửa video Trích xuất các khoảnh khắc hoặc điểm nổi bật chính để xem trước nhanh Tạo thẻ nội dung để cải thiện khả năng tìm kiếm Các trường hợp sử dụng này cho thấy cách Nova có thể được tích hợp vào các quy trình công việc và kịch bản tự động hóa nội dung khác nhau.\nTổng kết Giờ đây bạn đã có kinh nghiệm sử dụng Amazon Bedrock để hiểu video và tạo văn bản, chúng ta sẽ chuyển sang một trong những trường hợp sử dụng phổ biến nhất trong AI Tạo sinh:\nTrò chuyện với tài liệu của bạn ️\nPhần tiếp theo này sẽ dựa trên những gì bạn đã học và chỉ cho bạn cách tạo trải nghiệm tương tác với nội dung dựa trên tài liệu.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/3-module2/",
	"title": "Module 2",
	"tags": [],
	"description": "",
	"content": "Sử Dụng Foundation Models trong Amazon Bedrock Tổng Quan Amazon Bedrock là một dịch vụ được quản lý hoàn toàn, cho phép bạn lựa chọn các foundation model (FM) hiệu suất cao từ các công ty AI hàng đầu như Stability AI, Anthropic và Meta thông qua một API duy nhất. Dịch vụ này cung cấp các năng lực cần thiết để xây dựng ứng dụng AI tạo sinh (Generative AI) với:\nBảo mật Riêng tư Responsible AI Vì Amazon Bedrock là serverless, bạn không cần quản lý hạ tầng. Bạn có thể tích hợp và triển khai AI tạo sinh vào ứng dụng của mình một cách an toàn thông qua các dịch vụ AWS quen thuộc.\nMục Tiêu Của Module Trong module này, bạn sẽ học cách sử dụng Amazon Bedrock thông qua:\n️ Giao diện Console Giao diện API Để tạo:\nVăn bản ️ Hình ảnh Cấp Quyền Truy Cập Mô Hình Trước khi bắt đầu sử dụng Amazon Bedrock, bạn cần cấp quyền truy cập các mô hình cho tài khoản của mình.\n️ Các Bước Cấp Quyền: Truy cập trang Model access Nhấn nút Enable specific models Chọn các checkbox dưới đây để kích hoạt các mô hình (việc kích hoạt không tốn phí – bạn chỉ trả tiền cho việc sử dụng): Amazon (chọn mục này sẽ tự động chọn tất cả các mô hình Amazon)\nAnthropic → Claude 3.5 Sonnet v2, Claude 3.5 Haiku\nMeta\nMistral AI\nStability AI → SDXL 1.0\nNhấn Request model access để yêu cầu kích hoạt các mô hình Theo Dõi Trạng Thái Truy Cập Theo dõi trạng thái truy cập của từng mô hình đã chọn Có thể mất vài phút để trạng thái chuyển từ In Progress ️ Access granted Dùng nút Refresh để cập nhật trạng thái Đảm bảo tất cả mô hình đã chọn hiển thị trạng thái Access granted\nChúc Mừng! Bạn đã cấu hình thành công Amazon Bedrock!\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/3-module2/3.2-use-amazon-bedrock-api/",
	"title": "Sử dụng Amazon Bedrock API",
	"tags": [],
	"description": "",
	"content": "Trong module này, chúng ta sẽ học cách sử dụng API của Amazon Bedrock để tạo văn bản và hình ảnh. Chúng ta cũng sẽ sử dụng Amazon Q để giúp chúng ta viết mã.\nAmazon Q là một trợ lý AI tạo sinh sinh động có thể hoạt động ở nơi bạn đang làm việc—có thể trong IDE hoặc AWS Console. Amazon Q có thể giúp viết mã, khắc phục sự cố và cung cấp các tài nguyên liên quan.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/4-module3/4.3-building-agents-for-amazon-bedrock/",
	"title": "Xây dựng Agents cho Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Amazon Bedrock Agents giúp bạn xây dựng các trợ lý AI tạo sinh có khả năng phân tích yêu cầu của người dùng thành nhiều bước. Chúng sử dụng hướng dẫn do nhà phát triển cung cấp để tạo kế hoạch phối hợp và sau đó thực hiện nó bằng cách gọi API và truy cập Knowledge Bases để cung cấp câu trả lời cuối cùng cho người dùng.\nTrong module này, chúng ta sẽ tạo một Agent Kiến trúc sư Giải pháp AWS sử dụng Knowledge Base của chúng ta để trả lời các câu hỏi liên quan đến AWS. Chúng ta cũng sẽ tạo một hành động (action) để đọc bản ghi từ cơ sở dữ liệu. Vì các mô hình ngôn ngữ lớn (LLM) không được thiết kế để phân tích dữ liệu, tốt hơn là xây dựng một công cụ chuyên dụng (Lambda) mà agent có thể gọi.\nBài tập 1: Xây dựng Agent Amazon Bedrock Truy cập Agents Console, sau đó nhấp vào Create Agent.\nĐiền các thông tin sau:\nName: Agent-AWS\nDescription: Agent AWS là một agent tự động, dựa trên AI giúp khách hàng với kiến thức về AWS bằng cách truy vấn AWS Well-Architected Framework\nĐể các cài đặt khác mặc định và nhấp vào Create.\nChi tiết Agent Chọn Amazon Nova Pro làm mô hình.\nCung cấp hướng dẫn sau:\nBạn là một Kiến trúc sư Giải pháp AWS được chứng nhận chuyên nghiệp. Vai trò của bạn là giúp khách hàng hiểu các phương pháp tốt nhất khi xây dựng trên AWS.\nNhấp vào Save ở trên cùng.\n️ Nhóm Hành động (Action Group) Hành động (Action) là một tác vụ mà agent có thể tự động thực hiện bằng cách gọi một hàm Lambda. Một tập hợp các hành động được định nghĩa trong một Nhóm Hành động (Action Group), và một schema OpenAPI định nghĩa tất cả các API trong nhóm. Trong bài tập này, chúng ta sẽ sử dụng một hành động được định nghĩa trước để đọc bản ghi từ cơ sở dữ liệu.\nĐể tạo nó:\nNhấp vào Add trong phần Action group. Nhập các thông tin sau: Action Group Name: data-processing Description: Actions to process data Action group type: Define with API schemas Lambda Function: Chọn một hàm hiện có → data_process_action API Schema: Chọn một schema OpenAPI hiện có Nhấp vào Browse S3, chọn bucket có tên openapibucket Chọn tệp agent_bedrock_schema.json Nhấp vào Choose, sau đó nhấp vào Create Tích hợp Knowledge Base Bây giờ chúng ta sẽ thêm Knowledge Base mà chúng ta đã tạo trước đó.\nNhấp vào Add trong phần Knowledge Base.\nChọn Knowledge Base đã tạo trước đó.\nSử dụng hướng dẫn này:\nTruy vấn AWS Well-Architected Framework để trả lời câu hỏi của khách hàng Nhấp vào Add để hoàn tất.\nSử dụng Agent Để kiểm tra Agent trong bảng điều khiển:\nNhấp vào Prepare trong cửa sổ trò chuyện. Khi đã sẵn sàng, bắt đầu đặt câu hỏi. Ví dụ:\nBạn có thể cho tôi biết gì về S3 buckets? Khi Agent trả lời, nhấp vào Show trace để xem các bước mà nó đã thực hiện để tạo ra câu trả lời.\nBạn cũng có thể kiểm tra hành động đọc bản ghi bằng cách hỏi:\nBạn có thể giúp tôi với nhiệm vụ xử lý dữ liệu để lấy số lượng bản ghi trong cơ sở dữ liệu sản xuất? ️ Có vẻ như chúng ta gặp phải lỗi. Đừng lo lắng—điều này là có chủ đích, và chúng ta sẽ sửa nó trong phần tiếp theo bằng cách sử dụng Amazon Q để gỡ lỗi hàm.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/4-module3/",
	"title": "Module 3",
	"tags": [],
	"description": "",
	"content": "Trò chuyện với Tài liệu của bạn Khả năng tiếp nhận tài liệu và sau đó có LLM trả lời các câu hỏi bằng ngữ cảnh có liên quan được gọi là Retrieval Augmented Generation (RAG). Mô-đun này tập trung vào việc xây dựng các giải pháp AI tạo sinh phổ biến này, khám phá nhiều phương pháp khác nhau để \u0026ldquo;trò chuyện với tài liệu của bạn\u0026rdquo;.\n"
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/5-wrapping-up/",
	"title": "Wrapping Up",
	"tags": [],
	"description": "",
	"content": "Và thế là bạn đã hoàn thành workshop về Generative AI trên AWS!\nTrong suốt hành trình này, bạn đã xây dựng các ứng dụng GenAI và sử dụng công cụ Generative để hỗ trợ viết mã và gỡ lỗi.\nNội dung bạn đã học Bắt đầu với PartyRock để thử nghiệm ý tưởng nhanh mà không cần viết code. ️ Xây dựng ứng dụng tạo hình ảnh và văn bản với Amazon Bedrock. Sử dụng Amazon Q Developer để tối ưu hóa quy trình phát triển. Triển khai các giải pháp RAG với LangChain, Knowledge Bases, và Agents. Hãy cho chúng tôi biết cảm nhận của bạn! Phản hồi của bạn rất quan trọng để cải thiện các workshop trong tương lai.\nĐiền khảo sát tại đây\nTài nguyên bổ sung Cộng đồng AWS Generative AI Hướng dẫn sử dụng PartyRock Ví dụ mã Amazon Bedrock ‍ Bắt đầu với Amazon Q Tài nguyên workshop Link workshop ‍ Kho GitHub Giờ thì\u0026hellip; bắt đầu xây dựng thôi! "
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/6-clean-up/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " ️ Lưu ý: Nếu bạn đang sử dụng tài khoản do AWS cung cấp, bạn có thể bỏ qua phần này.\nĐể tránh phát sinh chi phí không cần thiết, hãy thực hiện các bước dưới đây để xóa tất cả các tài nguyên bạn đã tạo trong suốt quá trình làm workshop.\nXóa đối tượng và Bucket trong S3 Truy cập S3 Console. Xóa tất cả các đối tượng trong các bucket sau: awsdocsbucket openapiBucket dataanalysisbucket Làm theo hướng dẫn này để xóa đối tượng. Sau khi đã làm trống, xóa luôn các bucket đó. Xóa IAM Roles Truy cập IAM Console. Trong thanh điều hướng, chọn Roles. Chọn các role sau: AmazonBedrockExecutionRoleForAgents_* AmazonBedrockExecutionRoleForKnowledgeBase_* AWSServiceRoleForAmazonOpenSearchServerless Nhấn Delete ở phía trên trang. Xóa Knowledge Base Truy cập Knowledge Base Console. Chọn Knowledge Base cần xóa. Nhấn Delete. Gõ delete để xác nhận. Xóa Agent Truy cập Agent Console. Chọn Agent cần xóa. Nhấn Delete. Gõ delete để xác nhận. Xóa Vector Database (OpenSearch Collection) Truy cập OpenSearch Collections Console. Chọn Collection cần xóa. Nhấn Delete. Gõ confirm để xác nhận. Xóa CloudFormation Stack Truy cập CloudFormation Console. Tại trang Stacks, chọn stack: gen-ai-workshop-cfn. Trong phần chi tiết, chọn Delete. Xác nhận bằng cách chọn Delete stack khi được yêu cầu. "
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/genai_workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]